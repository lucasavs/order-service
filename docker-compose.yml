version: '3'
services:
  order-service:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ".:/app"
    restart: on-failure # this way we enforce the container to restart until it finally get a connection with rabbitmq. In the future it is possible to depened on healthcheck instead
    env_file:
      - .env

  database:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes: 
      - ./postgres-data:/var/lib/postgresql/data
      # copy the sql script to create tables
      - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql

  product-service:
    image: rodolpheche/wiremock:2.23.2-alpine
    command: --verbose
    volumes:
      - ./wiremock/product-service/stubs:/home/wiremock
    ports:
    - "8081:8080"

  user-service:
    image: rodolpheche/wiremock:2.23.2-alpine
    command: --verbose
    volumes:
      - ./wiremock/user-service/stubs:/home/wiremock
    ports:
    - "8082:8080"

  rabbitmq:
    image: rabbitmq:3.7.15-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
    - ./rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro
    - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro